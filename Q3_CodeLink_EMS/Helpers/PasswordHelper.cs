using System.Security.Cryptography;
using System.Text;

namespace Q3_CodeLink_EMS.Helpers
{
    public class PasswordHelper
    {
        public static (byte[] Salt, byte[] Hash) SaltAndHashPassword(string plainTextPassword) // Using tuple to return Salt and Hash
        {
            using var hmac = new HMACSHA256(); // hmac.Key will automatically be a randomly generated salt
            byte[] salt = hmac.Key; // Retrieving the random salt generated by HMACSHA256
            byte[] hash = hmac.ComputeHash(Encoding.UTF8.GetBytes(plainTextPassword)); // Computing the HMACSHA256 hash of the password using the salt stored in hmac.Key and the plainTextPassword
            return (salt, hash); // Returning the salt and the hashed password as a tuple
        }

        public static bool VerifyPassword(string plainTextPassword, byte[] storedSalt, byte[] storedHash)
        {
            using var hmac = new HMACSHA256(storedSalt); // Creating a new HMACSHA256 instance using the stored salt ensuring it will match with the registration hash
            byte[] computedHash = hmac.ComputeHash(Encoding.UTF8.GetBytes(plainTextPassword)); // Computing the HMACSHA256 hash of the password using the salt stored and the plainTextPassword
            return computedHash.SequenceEqual(storedHash); // If the two hashes match, the password is verified
        }
    }
}
